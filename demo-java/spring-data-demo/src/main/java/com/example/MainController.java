package com.example;

import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.commons.lang.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after
								// Application path)
public class MainController {
	
	private static final Logger logger = LoggerFactory.getLogger(MainController.class);
	
	
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle
				// the data
	private UserRepository userRepository;

	private AtomicBoolean trigger = new AtomicBoolean(false);

	@GetMapping(path = "/start/{trigger}")
	public @ResponseBody boolean startInserting(@PathVariable("trigger") boolean triggerBool) {
		//boolean bool = Boolean.getBoolean(triggerBool);
		logger.info("bool :: "+triggerBool);
		if (triggerBool) {
			trigger.set(true);
			logger.info("process to load is triggered");
			kickStart();
		} else {
			logger.info("process to load is stopped");
			trigger.set(false);
		}
		return true;
	}

	private void kickStart() {
		while (trigger.get()) {
			String name = RandomStringUtils.randomAlphabetic(6);
			String email = new StringBuffer(name).append("@gmail.com").toString();
			addNewUser(name, email);
		}
	}

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view
		// name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "/get/{name}")
	public @ResponseBody List<User> getUserByName(@PathVariable("name") String name) {
		return userRepository.findByName(name);
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}
